% ==============================================================
% ASML_regions_parametric_FIXED.mcrl2 — Parametric 3-Region plant
% Implements: Outside robot -> sluice; inside robot -> waiting; waiting -> stage -> waiting;
% then waiting -> sluice (vac), vent to Atm, sluice -> outside; outside robot -> output rack.
% ==============================================================

map
  NUM_WAFERS  : Nat;  NUM_SLUICES : Nat;
  NUM_FOUP_IN : Nat;  NUM_FOUP_OUT: Nat;
eqn
  NUM_WAFERS   = 2;      % set to 2+ as needed
  NUM_SLUICES  = 2;      % set to 2 to match "two sluices"
  NUM_FOUP_IN  = 2;
  NUM_FOUP_OUT = 2;

sort
  SluiceId = struct s(n:Nat);
  Wafer    = struct w(n:Nat);

  Loc =
      struct in_cell(n:Nat)
           | sl_out(SluiceId)     % exterior landing
           | sl_in(SluiceId)      % sluice buffer (1 slot, vacuum side)
           | waiting
           | stage
           | out_cell(n:Nat);

  PMode = struct Atm | Pumping | Vac | Venting;

  MOptWafer = struct none | some(Wafer);

act
  % Doors & pressure
  open_inner, close_inner : SluiceId;
  open_outer, close_outer : SluiceId;
  start_pump_down, vacuum_achieved : SluiceId;
  start_vent, atmosphere_achieved  : SluiceId;
  vacuum_fault : SluiceId;

  % Transfers (observations)
  transfer_in, transfer_out : Wafer # SluiceId;
  pick, place : Wafer # Loc;

  % Stage / projection
  load_stage, start_projection, end_projection, unload_stage : Wafer;

  % I/O observation
  wafer_entered_system, wafer_output : Wafer;

  % Alarm control
  trigger_alarm, restart_system;

% ----------------------------------------------
% Helpers
% ----------------------------------------------
map
  validSluice  : SluiceId -> Bool;
  validWafer   : Wafer    -> Bool;
  validInCell  : Nat      -> Bool;
  validOutCell : Nat      -> Bool;
  sid2n        : SluiceId -> Nat;
  w2n          : Wafer    -> Nat;

var k:Nat; sid:SluiceId; wf:Wafer;

eqn
  sid2n(s(k)) = k;
  w2n(w(k))   = k;

  validSluice(sid) = sid2n(sid) < NUM_SLUICES;
  validWafer(wf)   = w2n(wf)    < NUM_WAFERS;
  validInCell(k)   = k < NUM_FOUP_IN;
  validOutCell(k)  = k < NUM_FOUP_OUT;

% ----------------------------------------------
% Single-process plant with global alarm + all regions' state
% ----------------------------------------------
proc Plant(
  in_open   : SluiceId -> Bool,
  out_open  : SluiceId -> Bool,
  mode      : SluiceId -> PMode,

  % Sluice buffer (1 slot) — track occupancy + identity
  buf_occ   : SluiceId -> Bool,
  buf_w     : SluiceId -> MOptWafer,

  % Outer port (outside landing) — identity of wafer waiting outside
  ext_port_w: SluiceId -> MOptWafer,

  % Per-wafer phase & internal state
  phase     : Wafer    -> Nat,     % 0:not yet given to sluice (input side); 1:inside flow
  is_waiting: Wafer    -> Bool,

  % Stage state
  stage_busy: Bool,
  on_stage  : MOptWafer,

  % Output rack and completion
  processed : Wafer    -> Bool,
  out_occ   : Nat      -> Bool,

  % Global alarm
  alarm     : Bool
) =
  % =====================
  % ALARM: raise on fault, clear under safe conditions
  % =====================
  sum sid:SluiceId . (
      validSluice(sid) && mode(sid) == Pumping && !alarm
    ) -> vacuum_fault(sid) . trigger_alarm .
         Plant(in_open, out_open, mode[sid->Atm],
               buf_occ, buf_w, ext_port_w,
               phase, is_waiting, stage_busy, on_stage, processed, out_occ, true)
+
  ( alarm
    && ( forall sid:SluiceId .
           (validSluice(sid) => (!in_open(sid) && !out_open(sid)
                                 && (mode(sid)==Atm || mode(sid)==Vac)))
       )
  ) -> restart_system .
       Plant(in_open, out_open, mode,
             buf_occ, buf_w, ext_port_w,
             phase, is_waiting, stage_busy, on_stage, processed, out_occ, false)
+
  % =====================
  % REGION 2: Sluice control (doors/pressure)
  % =====================
  sum sid:SluiceId . (
      validSluice(sid) && mode(sid) == Atm && !out_open(sid) && !in_open(sid) 
    ) -> open_outer(sid) .
         Plant(in_open, out_open[sid->true], mode,
               buf_occ, buf_w, ext_port_w,
               phase, is_waiting, stage_busy, on_stage, processed, out_occ, alarm)
+
  sum sid:SluiceId . (
      validSluice(sid) && out_open(sid) && buf_occ(sid)
    ) -> close_outer(sid) .
         Plant(in_open, out_open[sid->false], mode,
               buf_occ, buf_w, ext_port_w,
               phase, is_waiting, stage_busy, on_stage, processed, out_occ, alarm)
+
  sum sid:SluiceId . (
      validSluice(sid) && mode(sid) == Vac && !in_open(sid) && !out_open(sid) 
    ) -> open_inner(sid) .
         Plant(in_open[sid->true], out_open, mode,
               buf_occ, buf_w, ext_port_w,
               phase, is_waiting, stage_busy, on_stage, processed, out_occ, alarm)
+
  sum sid:SluiceId . (
      validSluice(sid) && in_open(sid) && buf_occ(sid)
    ) -> close_inner(sid) .
         Plant(in_open[sid->false], out_open, mode,
               buf_occ, buf_w, ext_port_w,
               phase, is_waiting, stage_busy, on_stage, processed, out_occ, alarm)
+
  % Pump down: Atm -> Pumping -> Vac (sealed)
  sum sid:SluiceId . (
      validSluice(sid) && !in_open(sid) && !out_open(sid) && mode(sid) == Atm  && buf_occ(sid) && !alarm 
    ) -> start_pump_down(sid) .
         Plant(in_open, out_open, mode[sid->Pumping],
               buf_occ, buf_w, ext_port_w,
               phase, is_waiting, stage_busy, on_stage, processed, out_occ, alarm)
+
  sum sid:SluiceId . (
      validSluice(sid) && mode(sid) == Pumping 
    ) -> vacuum_achieved(sid) .
         Plant(in_open, out_open, mode[sid->Vac],
               buf_occ, buf_w, ext_port_w,
               phase, is_waiting, stage_busy, on_stage, processed, out_occ, alarm)
+
  % Vent: Vac -> Venting -> Atm (sealed)
  sum sid:SluiceId . (
      validSluice(sid) && !in_open(sid) && !out_open(sid) && mode(sid) == Vac 
    ) -> start_vent(sid) .
         Plant(in_open, out_open, mode[sid->Venting],
               buf_occ, buf_w, ext_port_w,
               phase, is_waiting, stage_busy, on_stage, processed, out_occ, alarm)
+
  sum sid:SluiceId . (
      validSluice(sid) && mode(sid) == Venting 
    ) -> atmosphere_achieved(sid) .
         Plant(in_open, out_open, mode[sid->Atm],
               buf_occ, buf_w, ext_port_w,
               phase, is_waiting, stage_busy, on_stage, processed, out_occ, alarm)
+
  % =====================
  % REGION 2 <-> REGION 1/3 transfers with identity
  % =====================
  % (A) Outside -> buffer (input): requires wafer at outer port and empty buffer
  sum sid:SluiceId, i:Nat . (
      validSluice(sid) && i < NUM_WAFERS && validWafer(w(i)) &&
      out_open(sid) && !in_open(sid) && mode(sid) == Atm && !buf_occ(sid)  &&
      ext_port_w(sid) == some(w(i)) 
    ) -> transfer_in(w(i), sid) . place(w(i), sl_in(sid)) .
         Plant(in_open, out_open, mode,
               buf_occ[sid->true], buf_w[sid->some(w(i))], ext_port_w[sid->none],
               phase[ w(i) -> 1 ], is_waiting, stage_busy, on_stage, processed, out_occ, alarm)
+
  % (B) Buffer -> inside waiting (vacuum side)
  sum sid:SluiceId, i:Nat . (
      validSluice(sid) && i < NUM_WAFERS && validWafer(w(i)) &&
      in_open(sid) && !out_open(sid) && mode(sid) == Vac && buf_occ(sid) && !alarm &&
      buf_w(sid) == some(w(i)) && !is_waiting(w(i))
    ) -> transfer_out(w(i), sid) . place(w(i), waiting) .
         Plant(in_open, out_open, mode,
               buf_occ[sid->false], buf_w[sid->none], ext_port_w,
               phase, is_waiting[ w(i) -> true ], stage_busy, on_stage, processed, out_occ, alarm)
+
  % (C) Inside waiting -> buffer (vacuum side) for output path
  sum sid:SluiceId, i:Nat . (
      validSluice(sid) && i < NUM_WAFERS && validWafer(w(i)) &&
      in_open(sid) && !out_open(sid) && mode(sid) == Vac && !buf_occ(sid) && !alarm &&
      is_waiting(w(i)) && processed(w(i)) 
    ) -> transfer_in(w(i), sid) . place(w(i), sl_in(sid)) .
         Plant(in_open, out_open, mode,
               buf_occ[sid->true], buf_w[sid->some(w(i))], ext_port_w,
               phase, is_waiting[ w(i) -> false ], stage_busy, on_stage, processed, out_occ, alarm)
+
  % (D) Buffer -> outside (atmosphere side) to hand to outside robot
  sum sid:SluiceId, i:Nat . (
      validSluice(sid) && i < NUM_WAFERS && validWafer(w(i)) &&
      out_open(sid) && !in_open(sid) && mode(sid) == Atm && buf_occ(sid)  &&
      buf_w(sid) == some(w(i)) && processed(w(i)) && buf_w(sid) != some(w(i))
    ) -> transfer_out(w(i), sid) . place(w(i), sl_out(sid)) .
         Plant(in_open, out_open, mode,
               buf_occ[sid->false], buf_w[sid->none], ext_port_w[sid->some(w(i))],
               phase, is_waiting, stage_busy, on_stage, processed, out_occ, alarm)
+
  % =====================
  % REGION 1: Outside robot (input and final output)
  % =====================
  % Input: pick from input FOUP and place at chosen sluice outer port
  sum i:Nat, sid:SluiceId . (
      i < NUM_WAFERS && validInCell(i) && validSluice(sid) && !alarm && phase(w(i)) == 0 && ext_port_w(sid) == none  
    ) -> pick(w(i), in_cell(i)) . wafer_entered_system(w(i)) .
         place(w(i), sl_out(sid)) .
         Plant(in_open, out_open, mode,
               buf_occ, buf_w, ext_port_w[sid->some(w(i))],
               phase[ w(i) -> 1 ], is_waiting, stage_busy, on_stage, processed, out_occ, alarm)
+
  % Output: pick from sluice outer port and place to an output rack cell
  sum sid:SluiceId, i:Nat, oc:Nat . (
      validSluice(sid) && i < NUM_WAFERS && validWafer(w(i)) &&
      validOutCell(oc) && !out_occ(oc) && !alarm &&
      ext_port_w(sid) == some(w(i)) && processed(w(i))
    ) -> pick(w(i), sl_out(sid)) . place(w(i), out_cell(oc)) . wafer_output(w(i)) .
         Plant(in_open, out_open, mode,
               buf_occ, buf_w, ext_port_w[sid->none],
               phase, is_waiting, stage_busy, on_stage,
               processed[ w(i) -> true ], out_occ[ oc -> true ], alarm)
+
  % =====================
  % REGION 3: Internal (waiting + single stage) — stage returns to waiting
  % =====================
  % Load stage and run projection if free
  sum i:Nat . (
      i < NUM_WAFERS && is_waiting(w(i)) && !stage_busy && !alarm && !processed(w(i))
    ) -> load_stage(w(i)) . start_projection(w(i)) . end_projection(w(i)) .
         Plant(in_open, out_open, mode,
               buf_occ, buf_w, ext_port_w,
               phase, is_waiting[ w(i) -> false ], true, some(w(i)),
                processed[ w(i) -> true ], out_occ, alarm)
+
  % Unload stage: back to waiting (not straight to output)
  sum i:Nat . (
      i < NUM_WAFERS && on_stage == some(w(i)) && !alarm
    ) -> unload_stage(w(i)) . place(w(i), waiting) .
         Plant(in_open, out_open, mode,
               buf_occ, buf_w, ext_port_w,
               phase, is_waiting[ w(i) -> true ], false, none,
               processed, out_occ, alarm)

;

init
  Plant(
    lambda sid:SluiceId . false,             % in_open
    lambda sid:SluiceId . false,             % out_open
    lambda sid:SluiceId . Atm,               % mode

    lambda sid:SluiceId . false,             % buf_occ
    lambda sid:SluiceId . none,              % buf_w
    lambda sid:SluiceId . none,              % ext_port_w

    lambda wf:Wafer    . 0,                  % phase
    lambda wf:Wafer    . false,              % is_waiting

    false,                                   % stage_busy
    none,                                    % on_stage

    lambda wf:Wafer    . false,              % processed
    lambda k:Nat       . false,              % out_occ

    false                                    % alarm
  );
