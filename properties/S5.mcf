% S5 â€” Unique ownership (with legal releases)
forall i:Nat. val(i < NUM_WAFERS) =>
  [ true* .
    % first placement of wafer i anywhere
    (  place(w(i), waiting)
    || (exists k:Nat . val(k < NUM_SLUICES) && ( place(w(i), sl_in(s(k)))  || place(w(i), sl_out(s(k))) ))
    || (exists c:Nat . val(c < NUM_FOUP_IN)  &&   place(w(i), in_cell(c)) )
    || (exists c:Nat . val(c < NUM_FOUP_OUT) &&   place(w(i), out_cell(c)) )
    )
    .
    % until a "release" of wafer i occurs:
    ( !(
         % any pick of wafer i
         pick(w(i), waiting)
      || (exists k:Nat . val(k < NUM_SLUICES) && ( pick(w(i), sl_in(s(k))) || pick(w(i), sl_out(s(k))) ))
      || (exists c:Nat . val(c < NUM_FOUP_IN)  &&   pick(w(i), in_cell(c)) )
      || (exists c:Nat . val(c < NUM_FOUP_OUT) &&   pick(w(i), out_cell(c)) )
         % sluice transfers consume the source location
      || (exists k:Nat . val(k < NUM_SLUICES) && ( transfer_in(w(i), s(k)) || transfer_out(w(i), s(k)) ))
         % stage operations also consume/release
      || load_stage(w(i)) || unload_stage(w(i))
       )
    )*
    .
    % a second placement before release is forbidden
    (  place(w(i), waiting)
    || (exists k:Nat . val(k < NUM_SLUICES) && ( place(w(i), sl_in(s(k)))  || place(w(i), sl_out(s(k))) ))
    || (exists c:Nat . val(c < NUM_FOUP_IN)  &&   place(w(i), in_cell(c)) )
    || (exists c:Nat . val(c < NUM_FOUP_OUT) &&   place(w(i), out_cell(c)) )
    )
  ] false
